{"version":3,"file":"index.js","sources":["../../../../components/Dropdown/index.tsx"],"sourcesContent":["import React from 'react';\nimport * as tokens from '@thumbtack/thumbprint-tokens';\nimport classNames from 'classnames';\nimport styles from './index.module.scss';\n\nconst iconColor = {\n    disabled: tokens.tpColorGray,\n    default: tokens.tpColorBlack,\n    error: tokens.tpColorRed,\n};\n\nconst getUIState = ({\n    isDisabled,\n    hasError,\n}: {\n    isDisabled: boolean;\n    hasError: boolean;\n}): 'disabled' | 'error' | 'default' => {\n    if (isDisabled) {\n        return 'disabled';\n    }\n\n    if (hasError) {\n        return 'error';\n    }\n\n    return 'default';\n};\n\nexport interface DropdownProps<T extends string | number> {\n    /**\n     * A collection of [HTML `<option>` elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option).\n     */\n    children?: React.ReactNode;\n    /**\n     * Adds a HTML `id` attribute to the select. This is used for linking the HTML with a\n     * [Label](/components/label/react/).\n     */\n    id?: string;\n    /**\n     * Visually and functionally disables the select dropdown.\n     */\n    isDisabled?: boolean;\n    /**\n     * Adds `required` HTML attribute to element, indicating that an option with a non-empty string\n     * value must be selected.\n     */\n    isRequired?: boolean;\n    /**\n     * Makes the radio and text color red.\n     */\n    hasError?: boolean;\n    /**\n     * Changes the selectâ€™s font-size, height, and padding.\n     */\n    size?: 'small' | 'large';\n    /**\n     * Set the `<select>`'s width to `100%` as opposed to the default behavior\n     * of only taking up the necessary width.\n     */\n    isFullWidth?: boolean;\n    /**\n     * The `value` of the `<option>` that is selected. See [React documentation\n     * on `<select>` and controlled components](https://facebook.github.io/react/docs/forms.html#the-select-tag)\n     * to learn more.\n     */\n    value: T;\n    /**\n     * Function that is fired when the value of the select changes.\n     */\n    onClick?: (event: React.MouseEvent<HTMLSelectElement, MouseEvent>) => void;\n    /**\n     * A function that is fired when the value of the select changes. The\n     * new `value` is passed to the function.\n     */\n    onChange: (value: T, event: React.ChangeEvent<HTMLSelectElement>) => void;\n    /**\n     * Fires when the select receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLSelectElement>) => void;\n    /**\n     * Fires when the select loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLSelectElement>) => void;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTestId?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     * @deprecated Deprecated in favor of the `dataTestId` prop\n     */\n    dataTest?: string;\n    /**\n     * Adds `name` HTML attribute to element, indicating the property name associated with the\n     * selected value.\n     */\n    name?: string;\n    /**\n     * This adds an `aria-label` to the element. It should only be used in cases where the\n     * `<Dropdown>` doesn't have or can't be associated with a related `<label>`. [Learn more about\n     * the importance of using labels](https://dequeuniversity.com/rules/axe/4.3/select-name).\n     */\n    accessibilityLabel?: string;\n}\n\nexport default function Dropdown<T extends string | number = string>({\n    accessibilityLabel,\n    children,\n    dataTest,\n    dataTestId,\n    hasError = false,\n    id,\n    isDisabled = false,\n    isFullWidth = false,\n    isRequired = false,\n    name,\n    onChange,\n    onFocus,\n    onBlur,\n    onClick = (): void => {},\n    size = 'large',\n    value,\n}: DropdownProps<T>): JSX.Element {\n    const uiState = getUIState({ isDisabled, hasError });\n\n    return (\n        <div\n            className={classNames({\n                [styles.root]: true,\n                [styles.rootWidthFull]: isFullWidth,\n            })}\n        >\n            <select\n                className={classNames({\n                    [styles.select]: true,\n                    [styles.selectStateDisabled]: uiState === 'disabled',\n                    [styles.selectStateError]: uiState === 'error',\n                    [styles.selectStateDefault]: uiState === 'default',\n                    [styles.selectSizeSmall]: size === 'small',\n                    [styles.selectSizeLarge]: size === 'large',\n                })}\n                id={id}\n                disabled={isDisabled}\n                required={isRequired}\n                value={value}\n                onClick={onClick}\n                onChange={(event): void => onChange(event.target.value as T, event)}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                data-testid={dataTestId}\n                data-test={dataTest}\n                aria-label={accessibilityLabel}\n                name={name}\n            >\n                {children}\n            </select>\n\n            <svg\n                viewBox=\"0 0 24 24\"\n                width=\"18\"\n                height=\"18\"\n                className={styles.caret}\n                stroke={iconColor[uiState]}\n                strokeWidth=\"3\"\n                fill=\"none\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            >\n                <polyline points=\"6 9 12 15 18 9\" />\n            </svg>\n        </div>\n    );\n}\n"],"names":["iconColor","disabled","tokens","default","error","getUIState","isDisabled","hasError","Dropdown","accessibilityLabel","children","dataTest","dataTestId","id","isFullWidth","isRequired","name","onChange","onFocus","onBlur","onClick","size","value","uiState","classNames","styles","root","rootWidthFull","select","selectStateDisabled","selectStateError","selectStateDefault","selectSizeSmall","selectSizeLarge","event","target","caret"],"mappings":";;;;;;AAKA,IAAMA,SAAS,GAAG;EACdC,QAAQ,EAAEC,WADI;EAEdC,OAAO,EAAED,YAFK;EAGdE,KAAK,EAAEF;CAHX;;AAMA,IAAMG,UAAU,GAAG,SAAbA,UAAa;MACfC,kBAAAA;MACAC,gBAAAA;;MAKID,UAAJ,EAAgB;WACL,UAAP;;;MAGAC,QAAJ,EAAc;WACH,OAAP;;;SAGG,SAAP;CAfJ;;AA+FA,SAAwBC;;;MACpBC,2BAAAA;MACAC,iBAAAA;MACAC,iBAAAA;MACAC,mBAAAA;6BACAL;MAAAA,uCAAW;MACXM,WAAAA;+BACAP;MAAAA,2CAAa;gCACbQ;MAAAA,6CAAc;+BACdC;MAAAA,2CAAa;MACbC,aAAAA;MACAC,kBAAAA;MACAC,gBAAAA;MACAC,eAAAA;4BACAC;MAAAA,qCAAU;yBACVC;MAAAA,+BAAO;MACPC,cAAAA;MAEMC,OAAO,GAAGlB,UAAU,CAAC;IAAEC,UAAU,EAAVA,UAAF;IAAcC,QAAQ,EAARA;GAAf,CAA1B;SAGI;IACI,SAAS,EAAEiB,UAAU,iDAChBC,MAAM,CAACC,IADS,EACF,IADE,gCAEhBD,MAAM,CAACE,aAFS,EAEOb,WAFP;KAKrB;IACI,SAAS,EAAEU,UAAU,mDAChBC,MAAM,CAACG,MADS,EACA,IADA,iCAEhBH,MAAM,CAACI,mBAFS,EAEaN,OAAO,KAAK,UAFzB,iCAGhBE,MAAM,CAACK,gBAHS,EAGUP,OAAO,KAAK,OAHtB,iCAIhBE,MAAM,CAACM,kBAJS,EAIYR,OAAO,KAAK,SAJxB,iCAKhBE,MAAM,CAACO,eALS,EAKSX,IAAI,KAAK,OALlB,iCAMhBI,MAAM,CAACQ,eANS,EAMSZ,IAAI,KAAK,OANlB,iBADzB;IASI,EAAE,EAAER,EATR;IAUI,QAAQ,EAAEP,UAVd;IAWI,QAAQ,EAAES,UAXd;IAYI,KAAK,EAAEO,KAZX;IAaI,OAAO,EAAEF,OAbb;IAcI,QAAQ,EAAE,kBAACc,KAAD;aAAiBjB,SAAQ,CAACiB,KAAK,CAACC,MAAN,CAAab,KAAd,EAA0BY,KAA1B,CAAzB;KAdd;IAeI,OAAO,EAAEhB,OAfb;IAgBI,MAAM,EAAEC,MAhBZ;mBAiBiBP,UAjBjB;iBAkBeD,QAlBf;kBAmBgBF,kBAnBhB;IAoBI,IAAI,EAAEO;KAELN,QAtBL,CANJ,EA+BI;IACI,OAAO,EAAC,WADZ;IAEI,KAAK,EAAC,IAFV;IAGI,MAAM,EAAC,IAHX;IAII,SAAS,EAAEe,MAAM,CAACW,KAJtB;IAKI,MAAM,EAAEpC,SAAS,CAACuB,OAAD,CALrB;IAMI,WAAW,EAAC,GANhB;IAOI,IAAI,EAAC,MAPT;IAQI,aAAa,EAAC,OARlB;IASI,cAAc,EAAC;KAEf;IAAU,MAAM,EAAC;IAXrB,CA/BJ,CADJ;;;;;"}